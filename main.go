package main

import (
	"context"
	cli "github.com/jawher/mow.cli"
	"log"
	"os"
)

type Config struct {
	Deep      int
	Package   string
	Structure string
	Variable  string
	Comment   string
	Write     bool
}

func main() {

	app := cli.App("gosingl", "generate module level singleton")
	chosenPackage := app.StringArg("PKG", "", "package to walk to")
	chosenStruct := app.StringArg("STRUCTURE", "", "structure will be use as module singleton")
	chosenVariable := app.StringOpt("variable", "Instance", "singleton instance (module variable)")
	comment := app.StringOpt("comment", "Code generated by <git repo>. DO NOT EDIT.", "file header comment")
	chosenDeep := app.IntOpt("deep", 0, "recursive deep")

	//time.Sleep(time.Second * 10)

	// writeType
	write := app.BoolOpt("w write", false, "writes the result in file")

	exitOnError := func(err error) {
		log.Println(err)
		os.Exit(1)
	}

	var err error
	app.Action = func() {
		cfg := Config{
			Deep:      *chosenDeep,
			Package:   *chosenPackage,
			Structure: *chosenStruct,
			Variable:  *chosenVariable,
			Comment:   *comment,
			Write:     *write,
		}
		ctx := context.Background()
		ctx = SetupCtx(context.Background(), //as reference
			nil, //global output target //"write" and "file" flags will be ignored if set
			nil, //shared buffer, mostly internal
			nil, //helper to generate name for unnamed function input parameters
			nil, //checker which excludes duplicates from output
		)
		err = ParsePackage(ctx, cfg)
		if err != nil {
			exitOnError(err)
		}
	}

	err = app.Run(os.Args)
	if err != nil {
		exitOnError(err)
	}

}
