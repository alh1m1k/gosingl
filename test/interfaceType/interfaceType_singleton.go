// Code generated by <git repo>. DO NOT EDIT.
package interfaceType

import (
	"fmt"
	"go/ast"
)

var Instance interfaceType

func InterfaceEmpty(any2 any, bool2 bool, c int32, d interface{}, g *string) (string, error) {
	return Instance.InterfaceEmpty(any2, bool2, c, d, g)
}

func InterfaceType(any2 any, bool2 bool, c int32, td, g *string) (string, error) {
	return Instance.InterfaceType(any2, bool2, c, td, g)
}

func InterfaceMethods(any2, zomzom any, bool2 bool, c int32, d interface {
	doStuff(a string) error
	doStuffWithChan(a chan any) (<-chan int64, error)
	doStuffWithStruct(a chan any) (struct {
		ast.Field
		abc, def string
		callback
		_ map[string]any
		fmt.Stringer
		Include struct {
			diction string `gosing:"some"`
		}
	}, error)
}, g *string) (string, error) {
	return Instance.InterfaceMethods(any2, zomzom, bool2, c, d, g)
}

func InterfaceMethodsDeepAndCallback(any2 any, bool2 bool, c callback, d interface {
	IStuff(a string) error
	td
	IStuff2(ifn interface {
		IStuffDeep(a string) error
		td
	})
}, g *string) (string, error) {
	return Instance.InterfaceMethodsDeepAndCallback(any2, bool2, c, d, g)
}

// <io.ReadWriter> from /usr/local/go/src/io

// <Reader> from /usr/local/go/src/io

func Read(p []byte) (n int, err error) {
	return Instance.Read(p)
}

// <Writer> from /usr/local/go/src/io

func Write(p []byte) (n int, err error) {
	return Instance.Write(p)
}
